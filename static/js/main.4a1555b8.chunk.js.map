{"version":3,"sources":["components/card/card.jsx","components/friends/friends.jsx","components/modal/cmodal.jsx","components/nav/nav.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","info","className","name","age","height","professions","length","join","onClick","addOneRecord","icon","faPlusCircle","friends","personalData","Modal","back","setState","friendRecord","state","firstContact","showButton","prevProps","this","oneRecord","show","closeModal","cont","loadPersonalData","n","map","i","src","thumbnail","alt","weight","hair_color","f","key","Component","nav","Home","useState","records","setRecords","setOneRecord","modal","setModal","openModal","p","useEffect","a","console","log","axios","get","data","Brastlewark","getData","id","App","path","component","from","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a1555b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./card.scss\";\r\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nfunction Card(props) {\r\n    const {info} = props;\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"info-wrap\">\r\n                <div className=\"name\">\r\n                    <span className=\"card-label\">Name:</span>\r\n                    <span className=\"card-value\">{info.name}</span>\r\n                </div>\r\n                <div className=\"age\">\r\n                    <span className=\"card-label\">Age:</span>\r\n                    <span className=\"card-value\">{info.age}</span>\r\n                </div>\r\n                <div className=\"height\">\r\n                    <span className=\"card-label\">Height:</span>\r\n                    <span className=\"card-value\">{info.height}</span>\r\n                </div>\r\n                <div className=\"profession\">\r\n                    <span>\r\n                        {info.professions ? info.professions.length >= 2 ? <b>Professions: </b> : <b>Profession: </b> : <b>Profession: </b>}\r\n                        {info.professions ? info.professions.length > 0 ? info.professions.join(', ') : 'Unknown' : 'Unknown'}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div className=\"detail-wrap\">\r\n                <FontAwesomeIcon onClick={() => {\r\n                        props.addOneRecord(info)\r\n                        props.onClick();\r\n                }} className=\"plus-icon\" icon={faPlusCircle}/>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport \"./friends.scss\"\r\n\r\nfunction friends(props) {\r\n    const {name, personalData} = props;\r\n    return (\r\n        <span className=\"friends\" onClick={() => personalData(name)}>{name}</span>\r\n    );\r\n}\r\n\r\nexport default friends;","import React, { Component, Fragment } from 'react';\r\nimport Friends from \"../friends/friends\";\r\nimport \"./modal.scss\";\r\n\r\nclass Modal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            friendRecord: {},\r\n            firstContact: {},\r\n            showButton: false\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.oneRecord !== prevProps.oneRecord) {\r\n            this.setState({\r\n                friendRecord: this.props.oneRecord,\r\n                firstContact: this.props.oneRecord,\r\n                showButton: false\r\n            });\r\n        }\r\n      }\r\n      back = () => {\r\n        this.setState({friendRecord: this.state.firstContact, showButton: false});\r\n      }\r\n\r\n    render() {\r\n        let {friendRecord, showButton} = this.state;\r\n        const {show, closeModal} = this.props;\r\n        let cont = 0;\r\n        const loadPersonalData = (n) => {\r\n            this.setState({showButton: true});\r\n            this.props.info.map( i => {\r\n                if(i.name === n){\r\n                    this.setState({friendRecord: i});\r\n                }\r\n                return n;\r\n            })\r\n        }\r\n        return (\r\n            <Fragment>\r\n            <div className={show ? \"overlay\" : \"hide\"} onClick={closeModal}></div>\r\n            <div className={show ? \"wrapper\" : \"hide\"}>\r\n                <div className=\"modal\">\r\n                    <button className=\"close-button\" onClick={closeModal}>X</button>\r\n                    <button className={showButton ? \"back-button\" : \"hide\"} onClick={() => this.back()} >&lt;back</button>\r\n                    <div className=\"header\">\r\n                        <img className=\"profile-picture\" src={friendRecord.thumbnail} alt=\"profile\"></img>\r\n                        <div className=\"name\">\r\n                            <span className=\"modal-label\">Name:</span>\r\n                            <span className=\"modal-value\">{friendRecord.name}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"body\">\r\n                        <div className=\"age\">\r\n                            <span className=\"modal-label\">Age:</span>\r\n                            <span className=\"modal-value\">{friendRecord.age}</span>\r\n                        </div>\r\n                        <div className=\"height space\">\r\n                            <span className=\"modal-label\">Height:</span>\r\n                            <span className=\"modal-value\">{friendRecord.height}</span>\r\n                        </div>\r\n                        <div className=\"weight space\">\r\n                            <span className=\"modal-label\">Weight:</span>\r\n                            <span className=\"modal-value\">{friendRecord.weight}</span>\r\n                        </div>\r\n                        <div className=\"hair space\">\r\n                            <span className=\"modal-label\">Hair color:</span>\r\n                            <span className=\"modal-value\">{friendRecord.hair_color}</span>\r\n                        </div>\r\n                        <div className=\"profession\">\r\n                            <span>\r\n                                {friendRecord.professions ? friendRecord.professions.length >= 2 ? <b>Professions: </b> : <b>Profession: </b> : <b>Profession: </b>}\r\n                                {friendRecord.professions ? friendRecord.professions.length > 0 ? friendRecord.professions.join(', ') : 'Unknown' : 'Unknown'}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"friend\">\r\n                            <span>\r\n                                {friendRecord.friends ? friendRecord.friends.length === 0 ? '' : friendRecord.friends.length >= 2 ? <b>Friends: </b> : <b>Friend: </b> : ''}\r\n                                {friendRecord.friends ? friendRecord.friends.map(f => {\r\n                                    cont++\r\n                                    return <Friends name={f} key={cont} personalData={loadPersonalData}/>;\r\n                                }) : ''}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal;","import React from \"react\";\r\nimport \"./nav.scss\";\r\n\r\nfunction nav(props) {\r\n  return (\r\n    <div className=\"nav\">\r\n      <span>Project Cards</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default nav;\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport axios from \"axios\";\r\nimport Card from \"../components/card/card\";\r\n//import Modal from \"../components/modal/modal\";\r\nimport Cmodal from \"../components/modal/cmodal\";\r\nimport Nav from \"../components/nav/nav\";\r\nimport \"./home.scss\";\r\n\r\n\r\nfunction Home(props) {\r\n    const [records, setRecords] = useState([]);\r\n    const [oneRecord, setOneRecord] = useState({})\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const openModal = () => setModal(true);\r\n    const closeModal = () => setModal(false);\r\n    const addOneRecord = p => setOneRecord(p);\r\n\r\n    useEffect (() => {\r\n        async function getData() {\r\n            console.log('getData');\r\n            const data = await axios.get(\"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\");\r\n            setRecords(data.data.Brastlewark);\r\n        }\r\n        getData();\r\n    },[])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Cmodal closeModal={closeModal} show={modal} info={records} oneRecord={oneRecord}/>\r\n            <Nav />\r\n            <div className=\"cardPanel\">\r\n                {records.map(p => {\r\n                        return <Card key={p.id} info={p} onClick={openModal} addOneRecord={addOneRecord}/>\r\n                    }\r\n                )}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport './App.css';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route path=\"/home\" component={Home} />\n        <Redirect from=\"/\" to=\"/home\" />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}